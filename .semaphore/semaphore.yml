# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name your pipeline. In case you connect multiple pipelines with promotions,
# the name will help you differentiate between, for example, a CI build phase
# and delivery phases.
name: api.outof.coffee - a public-ish api

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images.
# See https://docs.semaphoreci.com/article/20-machine-types
# and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: Build hambone
    task:
      prologue:
        commands:
          - GO111MODULE=on
          - PROTOBUF_VERSION=3.5.1
          - PROTOC_FILENAME=protoc-${PROTOBUF_VERSION}-linux-x86_64.zip
          - pushd ~
          - curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/${PROTOC_FILENAME} -o ${PROTOC_FILENAME}
          - unzip ${PROTOC_FILENAME}
          - bin/protoc --version
          - export PROTOC=$(pwd)/bin/protoc
          - export PATH=${PATH}:$(pwd)/bin
          - popd
      jobs:
      - name: go get & build
        commands:
          # Download code from Git repository. This step is mandatory if the
          # job is to work with your code.
          - checkout
          # Set version of Go:
          - sem-version go 1.12
          # Download dependencies and build the project:
          - go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
          - go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
          - go get -u github.com/golang/protobuf/protoc-gen-go
          - go get -u github.com/grpc-ecosystem/grpc-gateway
          - go get -u ./...
          - make clean && make hambone
          - docker build -f Dockerfile.hambone -t hambone:latest
      epilogue:
        commands:
          - git status
  - name: Test hambone
    task:
      prologue:
        commands:
          - docker run -pD --name=hambone hambone
          - export PORT=$(docker port hambone | grep 8080 | awk '{split($3,v,":"); print v[2]}')
      jobs:
      - name: can it curl
        commands:
          - curl http://localhost:${PORT}/v1/hambones